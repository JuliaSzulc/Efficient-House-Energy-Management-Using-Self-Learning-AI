Python jest interpretowanym jÄ™zykiem programowania wysokiego poziomu, generalnie funkcjonuje jako jÄ™zyk skryptowy. Czyli 1. nie kompiluje siÄ™ kodu nijak, tylko 2. trzeba mieÄ‡ "pythona" (czyli interpreter) zainstalowanego na kompie. Przez to jest multiplatformowy (o tyle o ile cokolwiek jest). 

UÅ¼ywane sÄ… dwie wersje, 2.* i 3.*, tzn jest np i 3.4 i 3.6, ale zasadnicze rÃ³Å¼nice na naszym poziomie sÄ… tylko miÄ™dzy wersjami 2 a 3. My uÅ¼ywamy 3.5, bo jesteÅ›my kurde nowoczeÅ›ni, a co.

Åšrodowisko do pracy jest dowolne, tzn. kaÅ¼dy notatnik, ale rekomenduje PyCharma, jak wszystko od intellij. Z linii komend program pythonowy odpalamy za pomocÄ…:

python3 nazwaprogramu.py

tak, nazwy plikÃ³w pythonowych koÅ„czÄ… siÄ™ na .py . I to jest jeden z dwÃ³ch podstawowych sposobÃ³w pracy z pythonem, czyli piszemy skrypt, zapisujemy jako dupa.py i odpalamy. Inaczej moÅ¼na, jeÅ›li chcemy pracowaÄ‡ z real-time interpreterem to po prostu odpalamy python3 w linii komend, wyskakuje nam 
>>>
i moÅ¼emy pisaÄ‡, i patrzeÄ‡ co sie dzieje xd
wiadomo, to bardziej dla nauki czy debuga.


No i teraz o skÅ‚adni

1. silnie dynamicznie typowany, czyli NIE okreÅ›lamy typu zmiennej (nie piszemy int, float itd), ale jak juÅ¼ RAZ OKREÅšLIMY TYP to nie da siÄ™ go zmieniÄ‡. To implikuje, Å¼e nie moÅ¼na sobie zrobiÄ‡ pustej zmiennej, zawsze musi mieÄ‡ jakÄ…Å› wartoÅ›Ä‡. Nawet jeÅ›li bÄ™dzie to None, czyli takie pythonowe NULL.

2. Wszystko jest obiektem, wiÄ™c teÅ¼ prawie wszytko ma wbudowane metody, ktore sobie gdzieÅ› tam po jakiejÅ› klasie object odziedziczyÅ‚o. Podobnie jak w javie. ALE UWAGA: to nie znaczy, Å¼e to jest jÄ™zyk stricte obiektowy - moÅ¼na w nim teÅ¼ pisaÄ‡ np funkcyjnie, ma duÅ¼o uÅ‚atwieÅ„ w tym kierunku.

3. Ma garbage collectora, wiÄ™c nie trzeba siÄ™ jakoÅ› mocno martwiÄ‡ pamiÄ™ciÄ…

4. jest CZYTELNY:
sÄ… wciÄ™cia zamiast nawiasÃ³w, co sprawia , Å¼e prawie kaÅ¼dego kod wyglÄ…da tak samo. I Å‚atwo siÄ™ czyta. Kilka konstrukcji:

x = 5
if x < 3:
    print('dupa')
	
co warto zauwaÅ¼yÄ‡: 
1.musiaÅ‚em przypisaÄ‡ jakÄ…Å› wartoÅ›Ä‡ dla x'a
2.jeÅ¼eli nie trzeba to nie ma nawiasÃ³w okrÄ…gÅ‚ych(ale jeÅ›li bym je zrobiÅ‚, to nie bÄ™dzie bÅ‚Ä…d, tylko niepotrzebna redundancja)
3.blok instrukcji jest wciÄ™ty 4 spacjami (skonfigurujcie sobie tak, Å¼eby naciÅ›niÄ™cie TAB robiÅ‚o 4 spacje)
4.wyÅ›wietlamy na ekran przez print(), w python 2 zamiast tego jest sÅ‚owo kluczowe print
5.nie ma znaczenia , czy ' ' czy " " , bo w pythonie nie ma charÃ³w, sÄ… tylko stringi.

inne funkcje wbudowane ktÃ³re warto znaÄ‡:
abs(), enumerate(), float(), int(), input(), open(), range(), set()

waÅ¼ne typy danych: (tak, sÄ… typy danych, ale one siedzÄ… pod spodem ğŸ˜œ )
liczbowe float i int, string, list, tuple, dict i set
tak naprawdÄ™ nic wiÄ™cej nie jest istotne na tym poziomie float i int wiadomo, string teÅ¼, moÅ¼na go indeksowaÄ‡ , np:

>>> a = 'dupadupa'
>>> a[0]
d

lista to jest dynamiczna tablica wskaznikow na obiekty ğŸ˜œ brzmi smiesznie, ale to superprosta sprawa. najwazniejsze, ze mozna w niej trzymaÄ‡ obiekty dowolnego typu

>>> lista = [1, 2, 3, 'a', 'dupa']
>>> lista [3]
'a'

o reszcie napiszÄ™ wam wieczorem, w miÄ™dzyczasie proponujÄ™ usiÄ…Å›Ä‡, napisaÄ‡ helloworld, potem jakÄ…Å› pÄ™tlÄ™ liczÄ…cÄ… powtÃ³rzenia, potem zamieÅ›cic to w funkcji, potem tÄ™ funkcjÄ™ przerobiÄ‡ na metodÄ™ i jesteÅ›cie programistami pythona ğŸ˜›
na koniec moÅ¼ecie wysÅ‚Ä…Ä‡ to tu a @Filip wam pokaÅ¼e, jak to zrobiÄ‡ w jednej linii XD
